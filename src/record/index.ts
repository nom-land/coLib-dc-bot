import { Contract } from "crossbell";
import { createNewRecordIfNotExist } from "../crossbell";
import { Record } from "./types";
import { encode, hashOf } from "../utils";

export async function getRecord(
    record: Record,
    c: Contract,
    admin: `0x${string}`,
    curator: bigint
): Promise<bigint> {
    // Upload the record on chain
    // console.assert(record.parsed, "record has not been parsed");
    let characterId: bigint;
    // if the record exists
    // TODO: find that record and return
    // else
    characterId = BigInt(0);
    const { refers, url, title } = record;
    if (refers) {
        for (const ref of refers) {
            //TODO: save refs on chain
        }
    }
    //TODO: handle generated by title?
    const handle = title
        ? encode(title).slice(0, 12) + hashOf(url, 12)
        : hashOf(url);
    console.log("handle is", handle);

    characterId = await createNewRecordIfNotExist(
        c,
        admin,
        handle,
        record,
        curator
    );
    return characterId;
}
